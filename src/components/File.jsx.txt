// App.tsx
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Sidebar } from "@/components/Sidebar";
import { Icons } from "@/components/icons";

const APP_SLUG = 'tablesprint-123456';
const API_TOKEN = '9bi7GsDZJgTMR9sQN813hKcHYIG2';

export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [activeSection, setActiveSection] = useState('category');
  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [modals, setModals] = useState({
    category: false,
    subcategory: false,
    product: false
  });

  const fetchData = async (collection) => {
    const response = await fetch('https://r0c8kgwocscg8gsokogwwsw4.zetaverse.one/mongodb', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        appSlug: APP_SLUG,
        action: 'read',
        collection
      })
    });
    const data = await response.json();
    return data.result || [];
  };

  useEffect(() => {
    if (isLoggedIn) {
      fetchData('categories').then(setCategories);
      fetchData('subcategories').then(setSubcategories);
      fetchData('products').then(setProducts);
    }
  }, [isLoggedIn]);

  const handleLogin = (e) => {
    e.preventDefault();
    setIsLoggedIn(true);
  };

  const handleAdd = async (collection, data) => {
    await fetch('https://r0c8kgwocscg8gsokogwwsw4.zetaverse.one/mongodb', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        appSlug: APP_SLUG,
        action: 'create',
        collection,
        data
      })
    });
    
    fetchData(collection).then((data) => {
      if (collection === 'categories') setCategories(data);
      if (collection === 'subcategories') setSubcategories(data);
      if (collection === 'products') setProducts(data);
    });
    setModals({ ...modals, [collection.slice(0, -3)]: false });
  };

  const handleDelete = async (collection, id) => {
    await fetch('https://r0c8kgwocscg8gsokogwwsw4.zetaverse.one/mongodb', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        appSlug: APP_SLUG,
        action: 'delete',
        collection,
        id
      })
    });
    
    fetchData(collection).then((data) => {
      if (collection === 'categories') setCategories(data);
      if (collection === 'subcategories') setSubcategories(data);
      if (collection === 'products') setProducts(data);
    });
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <Card className="w-full max-w-md">
          <CardHeader>
            <div className="flex justify-center">
              <img src="https://firebasestorage.googleapis.com/v0/b/widecanvas-d0dd4.appspot.com/o/logos%2Fimages.png?alt=media&token=ea8a0f75-5ee0-44c9-a4cb-b49a3ac3d4fb" alt="TableSprint Logo" className="h-12" />
            </div>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleLogin} className="space-y-4">
              <Input type="email" placeholder="Email" />
              <Input type="password" placeholder="Password" />
              <Button type="submit" className="w-full">Sign In</Button>
            </form>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex">
      <Sidebar activeSection={activeSection} setActiveSection={setActiveSection} />
      
      <main className="ml-64 flex-1 p-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-2xl font-bold">Dashboard</h1>
          <Button variant="destructive" onClick={() => setIsLoggedIn(false)}>
            <Icons.logout className="mr-2" /> Logout
          </Button>
        </div>

        {activeSection === 'category' && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Categories</CardTitle>
              <Button onClick={() => setModals({ ...modals, category: true })}>Add Category</Button>
            </CardHeader>
            <CardContent>
              {categories.map((category) => (
                <div key={category._id} className="flex items-center justify-between p-4 border rounded mb-2">
                  <div>
                    <h3 className="font-semibold">{category.name}</h3>
                    <p className="text-sm text-gray-600">{category.description}</p>
                  </div>
                  <Button variant="destructive" onClick={() => handleDelete('categories', category._id)}>
                    <Icons.trash />
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        )}

        {/* Similar sections for subcategories and products */}

        <Dialog open={modals.category} onOpenChange={(open) => setModals({ ...modals, category: open })}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add Category</DialogTitle>
            </DialogHeader>
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target);
              handleAdd('categories', {
                name: formData.get('name'),
                description: formData.get('description')
              });
            }}>
              <div className="space-y-4">
                <Input name="name" placeholder="Category Name" />
                <Input name="description" placeholder="Category Description" />
                <Button type="submit">Save</Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>

        {/* Similar dialogs for subcategories and products */}
      </main>
    </div>
  );
}